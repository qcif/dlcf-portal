// Generated by typings
// Source: https://raw.githubusercontent.com/typed-typings/npm-es6-promise/fb04188767acfec1defd054fc8024fafa5cd4de7/dist/es6-promise.d.ts
declare module '~sails~mongodb~es6-promise' {
export interface Thenable <R> {
  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Thenable<U>;
  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Thenable<U>;
}

export class Promise <R> implements Thenable <R> {
  /**
   * If you call resolve in the body of the callback passed to the constructor,
   * your promise is fulfilled with result object passed to resolve.
   * If you call reject your promise is rejected with the object passed to resolve.
   * For consistency and debugging (eg stack traces), obj should be an instanceof Error.
   * Any errors thrown in the constructor callback will be implicitly passed to reject().
   */
  constructor (callback: (resolve : (value?: R | Thenable<R>) => void, reject: (error?: any) => void) => void);

  /**
   * onFulfilled is called when/if "promise" resolves. onRejected is called when/if "promise" rejects.
   * Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called.
   * Both callbacks have a single parameter , the fulfillment value or rejection reason.
   * "then" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve.
   * If an error is thrown in the callback, the returned promise rejects with that error.
   *
   * @param onFulfilled called when/if "promise" resolves
   * @param onRejected called when/if "promise" rejects
   */
  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
  then <U> (onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => void): Promise<U>;

  /**
   * Sugar for promise.then(undefined, onRejected)
   *
   * @param onRejected called when/if "promise" rejects
   */
  catch <U> (onRejected?: (error: any) => U | Thenable<U>): Promise<U>;

  /**
   * Make a new promise from the thenable.
   * A thenable is promise-like in as far as it has a "then" method.
   */
  static resolve (): Promise<void>;
  static resolve <R> (value: R | Thenable<R>): Promise<R>;

  /**
   * Make a promise that rejects to obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error
   */
  static reject <R> (error: any): Promise<R>;

  /**
   * Make a promise that fulfills when every item in the array fulfills, and rejects if (and when) any item rejects.
   * the array passed to all can be a mixture of promise-like objects and other objects.
   * The fulfillment value is an array (in order) of fulfillment values. The rejection value is the first rejection value.
   */
  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>, T10 | Thenable<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;
  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;
  static all<T1, T2, T3, T4, T5, T6, T7, T8>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;
  static all<T1, T2, T3, T4, T5, T6, T7>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;
  static all<T1, T2, T3, T4, T5, T6>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;
  static all<T1, T2, T3, T4, T5>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>]): Promise<[T1, T2, T3, T4, T5]>;
  static all<T1, T2, T3, T4>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>]): Promise<[T1, T2, T3, T4]>;
  static all<T1, T2, T3>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>]): Promise<[T1, T2, T3]>;
  static all<T1, T2>(values: [T1 | Thenable<T1>, T2 | Thenable<T2>]): Promise<[T1, T2]>;
  static all<T1>(values: [T1 | Thenable<T1>]): Promise<[T1]>;
  static all<TAll>(values: Array<TAll | Thenable<TAll>>): Promise<TAll[]>;

  /**
   * Make a Promise that fulfills when any item fulfills, and rejects if any item rejects.
   */
  static race <R> (promises: (R | Thenable<R>)[]): Promise<R>;
}

/**
 * The polyfill method will patch the global environment (in this case to the Promise name) when called.
 */
export function polyfill (): void;
}

// Generated by typings
// Source: https://raw.githubusercontent.com/Think7/typings-mongodb/d960deefde9bccd48023df0ed241c1bca02eb5c0/mongodb.d.ts
declare module '~sails~mongodb' {
// Type definitions for MongoDB v2.1
// Project: https://github.com/mongodb/node-mongodb-native/tree/2.1
// Definitions by:  Andrew <https://github.com/Think7>
//                  Federico Caselli <https://github.com/CaselIT>
// Definitions: https://github.com/Think7/typings-mongodb

// Documentation : http://mongodb.github.io/node-mongodb-native/2.1/api/

// Use typings to install this type definition https://github.com/typings/typings

import {EventEmitter} from 'events';
import {Promise} from '~sails~mongodb~es6-promise';

// Class documentation : http://mongodb.github.io/node-mongodb-native/2.1/api/MongoClient.html
export class MongoClient {
    constructor();

    static connect(uri: string, callback: MongoCallback<Db>): void;
    static connect(uri: string, options?: MongoClientOptions): Promise<Db>;
    static connect(uri: string, options: MongoClientOptions, callback: MongoCallback<Db>): void;

    connect(uri: string, callback: MongoCallback<Db>): void;
    connect(uri: string, options?: MongoClientOptions): Promise<Db>;
    connect(uri: string, options: MongoClientOptions, callback: MongoCallback<Db>): void;
}

export interface MongoCallback<T> {
    (error: MongoError, result: T): void;
}

// http://mongodb.github.io/node-mongodb-native/2.1/api/MongoError.html
export class MongoError extends Error {
    constructor(message: string);
    static create(options: Object): MongoError;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/MongoClient.html#.connect
export interface MongoClientOptions {
    uri_decode_auth?: boolean;
    db?: DbCreateOptions;
    server?: ServerOptions;
    replSet?: ReplSetOptions;
    mongos?: MongosOptions;
    promiseLibrary?: Object;
}

// See : http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html
export interface DbCreateOptions {
    authSource?: string;
    //  the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = ‘majority’ or tag acknowledges the write.
    w?: number | string;
    // set the timeout for waiting for write concern to finish (combines with w option).
    wtimeout?: number;
    j?: boolean;
    // use c++ bson parser. default:false.
    native_parser?: boolean;
    // force server to create _id fields instead of client. default:false.
    forceServerObjectId?: boolean;
    serializeFunctions?: boolean;
    ignoreUndefined?: boolean;
    // peform operations using raw bson buffers. default:false.
    raw?: boolean;
    // when deserializing a Long will fit it into a Number if it’s smaller than 53 bits. default:true.
    promoteLongs?: boolean;
    bufferMaxEntries?: number;
    // the prefered read preference. use 'ReadPreference' class.
    readPreference?: ReadPreference | string;
    // custom primary key factory to generate _id values (see Custom primary keys).
    pkFactory?: Object;
    promiseLibrary?: Object;
    readConcern?: { level?: Object };
}

// See http://mongodb.github.io/node-mongodb-native/2.1/api/ReadPreference.html
export class ReadPreference {
    constructor(mode: string, tags: Object);
    mode: string;
    tags: any;
    static PRIMARY: string;
    static PRIMARY_PREFERRED: string;
    static SECONDARY: string;
    static SECONDARY_PREFERRED: string;
    static NEAREST: string;
    isValid(mode: string): boolean;
    static isValid(mode: string): boolean;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html
export interface SocketOptions {
    // Reconnect on error. default:false
    autoReconnect?: boolean;
    // TCP Socket NoDelay option. default:true
    noDelay?: boolean;
    // TCP KeepAlive on the socket with a X ms delay before start. default:0
    keepAlive?: number;
    // TCP Connection timeout setting. default 0
    connectTimeoutMS?: number;
    // TCP Socket timeout setting. default 0
    socketTimeoutMS?: number;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html
export interface ServerOptions {
    // - specify the number of connections in the pool default:5
    poolSize?: number;
    ssl?: boolean;
    sslValidate?: Object;
    checkServerIdentity?: boolean | Function;
    sslCA?: Array<Buffer | string>;
    sslCert?: Buffer | string;
    sslKey?: Buffer | string;
    sslPass?: Buffer | string;
    socketOptions?: SocketOptions;
    reconnectTries?: number;
    reconnectInterval?: number;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html
export interface ReplSetOptions {
    ha?: boolean;
    haInterval?: number;
    replicaSet?: string;
    secondaryAcceptableLatencyMS?: number;
    connectWithNoPrimary?: boolean;
    // - specify the number of connections in the pool default:5
    poolSize?: number;
    ssl?: boolean;
    sslValidate?: Object;
    checkServerIdentity?: boolean | Function;
    sslCA?: Array<Buffer | string>;
    sslCert?: Buffer | string;
    sslKey?: Buffer | string;
    sslPass?: Buffer | string;
    socketOptions?: SocketOptions;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Mongos.html
export interface MongosOptions {
    ha?: boolean;
    haInterval?: number;
    // - specify the number of connections in the pool default:5
    poolSize?: number;
    ssl?: boolean;
    sslValidate?: Object;
    checkServerIdentity?: boolean | Function;
    sslCA?: Array<Buffer | string>;
    sslCert?: Buffer | string;
    sslKey?: Buffer | string;
    sslPass?: Buffer | string;
    socketOptions?: SocketOptions;
}

// Class documentation : http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html
export class Db extends EventEmitter {
    constructor(databaseName: string, serverConfig: Server | ReplSet | Mongos, options?: DbCreateOptions);

    serverConfig: Server | ReplSet | Mongos;
    bufferMaxEntries: number;
    databaseName: string;
    options: any;
    native_parser: boolean;
    slaveOk: boolean;
    writeConcern: any;

    // http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser
    addUser(username: string, password: string, callback: MongoCallback<any>): void;
    addUser(username: string, password: string, options?: DbAddUserOptions): Promise<any>;
    addUser(username: string, password: string, options: DbAddUserOptions, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#admin
    admin(): Admin;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#authenticate
    authenticate(userName: string, password: string, callback: MongoCallback<any>): void;
    authenticate(userName: string, password: string, options?: { authMechanism: string }): Promise<any>;
    authenticate(userName: string, password: string, options: { authMechanism: string }, callback: MongoCallback<any>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#close
    close(callback: MongoCallback<void>): void;
    close(forceClose?: boolean): Promise<void>;
    close(forceClose: boolean, callback: MongoCallback<void>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection
    collection(name: string): Collection;
    collection(name: string, callback: MongoCallback<Collection>): Collection;
    collection(name: string, options: DbCollectionOptions, callback: MongoCallback<Collection>): Collection;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collections
    collections(): Promise<Collection[]>;
    collections(callback: MongoCallback<Collection[]>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#command
    command(command: Object, callback: MongoCallback<any>): void;
    command(command: Object, options?: { readPreference: ReadPreference | string }): Promise<any>;
    command(command: Object, options: { readPreference: ReadPreference | string }, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection
    createCollection(name: string, callback: MongoCallback<Collection>): void;
    createCollection(name: string, options?: CollectionCreateOptions): Promise<Collection>;
    createCollection(name: string, options: CollectionCreateOptions, callback: MongoCallback<Collection>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex
    createIndex(name: string, fieldOrSpec: string | Object, callback: MongoCallback<any>): void;
    createIndex(name: string, fieldOrSpec: string | Object, options?: IndexOptions): Promise<any>;
    createIndex(name: string, fieldOrSpec: string | Object, options: IndexOptions, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#db
    db(dbName: string): Db;
    db(dbName: string, options: { noListener?: boolean, returnNonCachedInstance?: boolean }): Db;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropCollection
    dropCollection(name: string): Promise<boolean>;
    dropCollection(name: string, callback: MongoCallback<boolean>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#dropDatabase
    dropDatabase(): Promise<any>;
    dropDatabase(callback: MongoCallback<any>): void;

    //deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#ensureIndex
    // ensureIndex(collectionName: any, fieldOrSpec: any, options: IndexOptions, callback: Function): void;
    //deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#eval
    // eval(code: any, parameters: any[], options?: any, callback?: MongoCallback<any>): void;

    //http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#executeDbAdminCommand
    executeDbAdminCommand(command: Object, callback: MongoCallback<any>): void;
    executeDbAdminCommand(command: Object, options?: { readPreference?: ReadPreference | string, maxTimeMS?: number }): Promise<any>;
    executeDbAdminCommand(command: Object, options: { readPreference?: ReadPreference | string, maxTimeMS?: number }, callback: MongoCallback<any>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#indexInformation
    indexInformation(name: string, callback: MongoCallback<any>): void;
    indexInformation(name: string, options?: { full?: boolean, readPreference?: ReadPreference | string }): Promise<any>;
    indexInformation(name: string, options: { full?: boolean, readPreference?: ReadPreference | string }, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#listCollections
    listCollections(filter: Object, options?: { batchSize?: number, readPreference?: ReadPreference | string }): CommandCursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#logout
    logout(callback: MongoCallback<any>): void;
    logout(options?: { dbName?: string }): Promise<any>;
    logout(options: { dbName?: string }, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#open
    open(): Promise<Db>;
    open(callback: MongoCallback<Db>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#removeUser
    removeUser(username: string, callback: MongoCallback<any>): void;
    removeUser(username: string, options?: { w?: number | string, wtimeout?: number, j?: boolean }): Promise<any>;
    removeUser(username: string, options: { w?: number | string, wtimeout?: number, j?: boolean }, callback: MongoCallback<any>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#renameCollection
    renameCollection(fromCollection: string, toCollection: string, callback: MongoCallback<Collection>): void;
    renameCollection(fromCollection: string, toCollection: string, options?: { dropTarget?: boolean }): Promise<Collection>;
    renameCollection(fromCollection: string, toCollection: string, options: { dropTarget?: boolean }, callback: MongoCallback<Collection>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#stats
    stats(callback: MongoCallback<any>): void;
    stats(options?: { scale?: number }): Promise<any>;
    stats(options: { scale?: number }, callback: MongoCallback<any>): void;
}



// Deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html
export class Server extends EventEmitter {
    constructor(host: string, port: number, options?: ServerOptions);

    connections(): Array<any>;
}

// Deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html
export class ReplSet extends EventEmitter {
    constructor(servers: Array<Server>, options?: ReplSetOptions);

    connections(): Array<any>;
}

// Deprecated http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html
export class Mongos extends EventEmitter {
    constructor(servers: Array<Server>, options?: MongosOptions);

    connections(): Array<any>;
}
// http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#addUser
export interface DbAddUserOptions {
    w?: string | number;
    wtimeout?: number;
    j?: boolean;
    customData?: Object;
    roles?: Object[];
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createCollection
export interface CollectionCreateOptions {
    w?: number | string;
    wtimeout?: number;
    j?: boolean;
    raw?: boolean;
    pkFactory?: Object;
    readPreference?: ReadPreference | string;
    serializeFunctions?: boolean;
    strict?: boolean;
    capped?: boolean;
    size?: number;
    max?: number;
    autoIndexId?: boolean;
}

// http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#collection
export interface DbCollectionOptions {
    w?: number | string;
    wtimeout?: number;
    j?: boolean;
    raw?: boolean;
    pkFactory?: Object;
    readPreference?: ReadPreference | string;
    serializeFunctions?: boolean;
    strict?: boolean;
    readConcern?: { level: Object };
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html#createIndex
export interface IndexOptions {
    // The write concern.
    w?: number | string;
    // The write concern timeout.
    wtimeout?: number;
    // Specify a journal write concern.
    j?: boolean;
    // Creates an unique index.
    unique?: boolean;
    // Creates a sparse index.
    sparse?: boolean;
    // Creates the index in the background, yielding whenever possible.
    background?: boolean;
    // A unique index cannot be created on a key that has pre-existing duplicate values.
    // If you would like to create the index anyway, keeping the first document the database indexes and
    // deleting all subsequent documents that have duplicate value
    dropDups?: boolean;
    // For geo spatial indexes set the lower bound for the co-ordinates.
    min?: number;
    // For geo spatial indexes set the high bound for the co-ordinates.
    max?: number;
    // Specify the format version of the indexes.
    v?: number;
    // Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)
    expireAfterSeconds?: number;
    // Override the auto generated index name (useful if the resulting name is larger than 128 bytes)
    name?: string;
}

// http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html
export interface Admin {
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser
    addUser(username: string, password: string, callback: MongoCallback<any>): void;
    addUser(username: string, password: string, options?: AddUserOptions): Promise<any>;
    addUser(username: string, password: string, options: AddUserOptions, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#authenticate
    authenticate(username: string, callback: MongoCallback<any>): void;
    authenticate(username: string, password?: string): Promise<any>;
    authenticate(username: string, password: string, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#buildInfo
    buildInfo(): Promise<any>;
    buildInfo(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#command
    command(command: Object, callback: MongoCallback<any>): void;
    command(command: Object, options?: { readPreference?: ReadPreference | string, maxTimeMS?: number }): Promise<any>;
    command(command: Object, options: { readPreference?: ReadPreference | string, maxTimeMS?: number }, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#listDatabases
    listDatabases(): Promise<any>;
    listDatabases(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#logout
    logout(): Promise<any>;
    logout(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#ping
    ping(): Promise<any>;
    ping(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingInfo
    profilingInfo(): Promise<any>;
    profilingInfo(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#profilingLevel
    profilingLevel(): Promise<any>;
    profilingLevel(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser
    removeUser(username: string, callback: MongoCallback<any>): void;
    removeUser(username: string, options?: FSyncOptions): Promise<any>;
    removeUser(username: string, options: FSyncOptions, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#replSetGetStatus
    replSetGetStatus(): Promise<any>;
    replSetGetStatus(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverInfo
    serverInfo(): Promise<any>;
    serverInfo(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#serverStatus
    serverStatus(): Promise<any>;
    serverStatus(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#setProfilingLevel
    setProfilingLevel(level: string): Promise<any>;
    setProfilingLevel(level: string, callback: MongoCallback<any>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#validateCollection
    validateCollection(collectionNme: string, callback: MongoCallback<any>): void;
    validateCollection(collectionNme: string, options?: Object): Promise<any>;
    validateCollection(collectionNme: string, options: Object, callback: MongoCallback<any>): void;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#addUser
export interface AddUserOptions {
    w?: number | string;
    wtimeout?: number;
    j?: boolean;
    fsync: boolean;
    customData?: Object;
    roles?: Object[]
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Admin.html#removeUser
export interface FSyncOptions {
    w?: number | string;
    wtimeout?: number;
    j?: boolean;
    fsync?: boolean
}

// Class documentation : http://mongodb.github.io/node-mongodb-native/2.1/api/ObjectID.html
export class ObjectID {
    constructor(s?: string | number);

    generationTime: number;

    // Creates an ObjectID from a hex string representation of an ObjectID.
    // hexString – create a ObjectID from a passed in 24 byte hexstring.
    static createFromHexString(hexString: string): ObjectID;
    // Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.
    // time – an integer number representing a number of seconds.
    static createFromTime(time: number): ObjectID;
    // Checks if a value is a valid bson ObjectId
    // id - Value to be checked
    static isValid(id: string | number): boolean;
    //Compares the equality of this ObjectID with otherID.
    equals(otherID: ObjectID): boolean;
    // Generate a 12 byte id string used in ObjectID's
    // time - optional parameter allowing to pass in a second based timestamp
    generate(time?: number): string;
    // Returns the generation date (accurate up to the second) that this ID was generated.
    getTimestamp(): Date;
    // Returns the ObjectID id as a 24 byte hex string representation
    toHexString(): string;
}

// Class documentation : http://mongodb.github.io/node-mongodb-native/2.1/api/Binary.html
export class Binary {
    constructor(buffer: Buffer, subType?: number);

    static SUBTYPE_BYTE_ARRAY: number;
    static SUBTYPE_DEFAULT: number;
    static SUBTYPE_FUNCTION: number;
    static SUBTYPE_MD5: number;
    static SUBTYPE_USER_DEFINED: number;
    static SUBTYPE_UUID: number;
    static SUBTYPE_UUID_OLD: number;

    // The length of the binary.
    length(): number;
    // Updates this binary with byte_value
    put(byte_value: number | string): void;
    // Reads length bytes starting at position.
    read(position: number, length: number): Buffer;
    // Returns the value of this binary as a string.
    value(): string;
    // Writes a buffer or string to the binary
    write(buffer: Buffer | string, offset: number): void;
}
//http://mongodb.github.io/node-mongodb-native/2.1/api/Double.html
export class Double {
    constructor(value: number);

    valueOf(): number;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Long.html
export class Long {
    constructor(low: number, high: number);

    static MAX_VALUE: Long;
    static MIN_VALUE: Long;
    static NEG_ONE: Long;
    static ONE: Long;
    static ZERO: Long;

    static fromBits(lowBits: number, highBits: number): Long;
    static fromInt(value: number): Long;
    static fromNumber(value: number): Long;
    static fromString(str: string, radix?: number): Long;

    add(other: Long): Long;
    and(other: Long): Long;
    compare(other: Long): number;
    div(other: Long): Long;
    equals(other: Long): boolean;
    getHighBits(): number;
    getLowBits(): number;
    getLowBitsUnsigned(): number;
    getNumBitsAbs(): number;
    greaterThan(other: Long): number;
    greaterThanOrEqual(other: Long): number;
    isNegative(): boolean;
    isOdd(): boolean;
    isZero(): boolean;
    lessThan(other: Long): boolean;
    lessThanOrEqual(other: Long): boolean;
    modulo(other: Long): Long;
    multiply(other: Long): Long;
    negate(): Long;
    not(): Long;
    notEquals(other: Long): boolean;
    or(other: Long): Long;
    shiftLeft(other: number): Long;
    shiftRight(other: number): Long;
    shiftRightUnsigned(other: number): Long;
    subtract(other: Long): Long;
    toInt(): number;
    toJSON(): string;
    toNumber(): number;
    toString(radix?: number): string;
    xor(other: Long): Long;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/MaxKey.html
export class MaxKey { }

//http://mongodb.github.io/node-mongodb-native/2.1/api/MinKey.html
export class MinKey { }

//http://mongodb.github.io/node-mongodb-native/2.1/api/Timestamp.html
export class Timestamp {
    constructor(low: number, high: number);

    static MAX_VALUE: Timestamp;
    static MIN_VALUE: Timestamp;
    static NEG_ONE: Timestamp;
    static ONE: Timestamp;
    static ZERO: Timestamp;

    static fromBits(lowBits: number, highBits: number): Timestamp;
    static fromInt(value: number): Timestamp;
    static fromNumber(value: number): Timestamp;
    static fromString(str: string, radix?: number): Timestamp;

    add(other: Timestamp): Timestamp;
    and(other: Timestamp): Timestamp;
    compare(other: Timestamp): number;
    div(other: Timestamp): Timestamp;
    equals(other: Timestamp): boolean;
    getHighBits(): number;
    getLowBits(): number;
    getLowBitsUnsigned(): number;
    getNumBitsAbs(): number;
    greaterThan(other: Timestamp): number;
    greaterThanOrEqual(other: Timestamp): number;
    isNegative(): boolean;
    isOdd(): boolean;
    isZero(): boolean;
    lessThan(other: Timestamp): boolean;
    lessThanOrEqual(other: Timestamp): boolean;
    modulo(other: Timestamp): Timestamp;
    multiply(other: Timestamp): Timestamp;
    negate(): Timestamp;
    not(): Timestamp;
    notEquals(other: Timestamp): boolean;
    or(other: Timestamp): Timestamp;
    shiftLeft(other: number): Timestamp;
    shiftRight(other: number): Timestamp;
    shiftRightUnsigned(other: number): Timestamp;
    subtract(other: Timestamp): Timestamp;
    toInt(): number;
    toJSON(): string;
    toNumber(): number;
    toString(radix?: number): string;
    xor(other: Timestamp): Timestamp;
}

// Documentation : http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html
export interface Collection {
    // Get the collection name.
    collectionName: string;
    // Get the full collection namespace.
    namespace: string;
    // The current write concern values.
    writeConcern: any;
    // The current read concern values.
    readConcern: any;
    // Get current index hint for collection.
    hint: any;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate
    aggregate(pipeline: Object[], callback: MongoCallback<any>): AggregationCursor;
    aggregate(pipeline: Object[], options?: CollectionAggregationOptions, callback?: MongoCallback<any>): AggregationCursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite
    bulkWrite(operations: Object[], callback: MongoCallback<BulkWriteOpResultObject>): void;
    bulkWrite(operations: Object[], options?: CollectionBluckWriteOptions): Promise<BulkWriteOpResultObject>;
    bulkWrite(operations: Object[], options: CollectionBluckWriteOptions, callback: MongoCallback<BulkWriteOpResultObject>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count
    count(query: Object, callback: MongoCallback<number>): void;
    count(query: Object, options?: MongoCountPreferences): Promise<number>;
    count(query: Object, options: MongoCountPreferences, callback: MongoCallback<number>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndex
    createIndex(fieldOrSpec: string | any, callback: MongoCallback<string>): void;
    createIndex(fieldOrSpec: string | any, options?: IndexOptions): Promise<string>;
    createIndex(fieldOrSpec: string | any, options: IndexOptions, callback: MongoCallback<string>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#createIndexes and http://docs.mongodb.org/manual/reference/command/createIndexes/
    createIndexes(indexSpecs: Object[]): Promise<any>;
    createIndexes(indexSpecs: Object[], callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany
    deleteMany(filter: Object, callback: MongoCallback<DeleteWriteOpResultObject>): void;
    deleteMany(filter: Object, options?: CollectionOptions): Promise<DeleteWriteOpResultObject>;
    deleteMany(filter: Object, options: CollectionOptions, callback: MongoCallback<DeleteWriteOpResultObject>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteOne
    deleteOne(filter: Object, callback: MongoCallback<DeleteWriteOpResultObject>): void;
    deleteOne(filter: Object, options?: { w?: number | string, wtimmeout?: number, j?: boolean, bypassDocumentValidation?: boolean }): Promise<DeleteWriteOpResultObject>;
    deleteOne(filter: Object, options: { w?: number | string, wtimmeout?: number, j?: boolean, bypassDocumentValidation?: boolean }, callback: MongoCallback<DeleteWriteOpResultObject>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#distinct
    distinct(key: string, query: Object, callback: MongoCallback<any>): void;
    distinct(key: string, query: Object, options?: { readPreference?: ReadPreference | string }): Promise<any>;
    distinct(key: string, query: Object, options: { readPreference?: ReadPreference | string }, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#drop
    drop(): Promise<any>;
    drop(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndex
    dropIndex(indexName: string, callback: MongoCallback<any>): void;
    dropIndex(indexName: string, options?: CollectionOptions): Promise<any>;
    dropIndex(indexName: string, options: CollectionOptions, callback: MongoCallback<any>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#dropIndexes
    dropIndexes(): Promise<any>;
    dropIndexes(callback?: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#find
    find(query?: Object): Cursor;
    /** @deprecated */
    find(query: Object, fields?: Object, skip?: number, limit?: number, timeout?: number): Cursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne
    /** @deprecated use find().limit(1).next(function(err, doc){}) */
    findOne(filter: Object, callback: MongoCallback<any>): void;
    /** @deprecated use find().limit(1).next(function(err, doc){}) */
    findOne(filter: Object, options?: FindOneOptions): Promise<any>;
    /** @deprecated use find().limit(1).next(function(err, doc){}) */
    findOne(filter: Object, options: FindOneOptions, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndDelete
    findOneAndDelete(filter: Object, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;
    findOneAndDelete(filter: Object, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject>;
    findOneAndDelete(filter: Object, options: { projection?: Object, sort?: Object, maxTimeMS?: number }, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace
    findOneAndReplace(filter: Object, replacement: Object, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;
    findOneAndReplace(filter: Object, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject>;
    findOneAndReplace(filter: Object, replacement: Object, options: FindOneAndReplaceOption, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndUpdate
    findOneAndUpdate(filter: Object, update: Object, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;
    findOneAndUpdate(filter: Object, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject>;
    findOneAndUpdate(filter: Object, update: Object, options: FindOneAndReplaceOption, callback: MongoCallback<FindAndModifyWriteOpResultObject>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch
    geoHaystackSearch(x: number, y: number, callback: MongoCallback<any>): void;
    geoHaystackSearch(x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any>;
    geoHaystackSearch(x: number, y: number, options: GeoHaystackSearchOptions, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear
    geoNear(x: number, y: number, callback: MongoCallback<any>): void;
    geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any>;
    geoNear(x: number, y: number, options: GeoNearOptions, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group
    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, callback: MongoCallback<any>): void;
    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any>;
    group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options: { readPreference?: ReadPreference | string }, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexes
    indexes(): Promise<any>;
    indexes(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexExists
    indexExists(indexes: string | string[]): Promise<boolean>;
    indexExists(indexes: string | string[], callback: MongoCallback<boolean>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#indexInformation
    indexInformation(callback: MongoCallback<any>): void;
    indexInformation(options?: { full: boolean }): Promise<any>;
    indexInformation(options: { full: boolean }, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#initializeOrderedBulkOp
    initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#initializeUnorderedBulkOp
    initializeUnorderedBulkOp(options?: CollectionOptions): UnorderedBulkOperation;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne
    /** @deprecated Use insertOne, insertMany or bulkWrite */
    insert(docs: Object, callback: MongoCallback<InsertOneWriteOpResult>): void;
    /** @deprecated Use insertOne, insertMany or bulkWrite */
    insert(docs: Object, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;
    /** @deprecated Use insertOne, insertMany or bulkWrite */
    insert(docs: Object, options: CollectionInsertOneOptions, callback: MongoCallback<InsertOneWriteOpResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany
    insertMany(docs: Object[], callback: MongoCallback<InsertWriteOpResult>): void;
    insertMany(docs: Object[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult>;
    insertMany(docs: Object[], options: CollectionInsertManyOptions, callback: MongoCallback<InsertWriteOpResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne
    insertOne(docs: Object, callback: MongoCallback<InsertOneWriteOpResult>): void;
    insertOne(docs: Object, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult>;
    insertOne(docs: Object, options: CollectionInsertOneOptions, callback: MongoCallback<InsertOneWriteOpResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#isCapped
    isCapped(): Promise<any>;
    isCapped(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#listIndexes
    listIndexes(options?: { batchSize?: number, readPreference?: ReadPreference | string }): CommandCursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce
    mapReduce(map: Function | string, reduce: Function | string, callback: MongoCallback<any>): void;
    mapReduce(map: Function | string, reduce: Function | string, options?: MapReduceOptions): Promise<any>;
    mapReduce(map: Function | string, reduce: Function | string, options: MapReduceOptions, callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#options
    options(): Promise<any>;
    options(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan
    parallelCollectionScan(callback: MongoCallback<Cursor[]>): void;
    parallelCollectionScan(options?: ParallelCollectionScanOptions): Promise<Cursor[]>;
    parallelCollectionScan(options: ParallelCollectionScanOptions, callback: MongoCallback<Cursor[]>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#reIndex
    reIndex(): Promise<any>;
    reIndex(callback: MongoCallback<any>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#remove
    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */
    remove(selector: Object, callback: MongoCallback<WriteOpResult>): void;
    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */
    remove(selector: Object, options?: CollectionOptions & { single?: boolean }): Promise<WriteOpResult>;
    /** @deprecated Use use deleteOne, deleteMany or bulkWrite */
    remove(selector: Object, options?: CollectionOptions & { single?: boolean }, callback?: MongoCallback<WriteOpResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#rename
    rename(newName: string, callback: MongoCallback<Collection>): void;
    rename(newName: string, options?: { dropTarget?: boolean }): Promise<Collection>;
    rename(newName: string, options: { dropTarget?: boolean }, callback: MongoCallback<Collection>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne
    replaceOne(filter: Object, doc: Object, callback: MongoCallback<UpdateWriteOpResult>): void;
    replaceOne(filter: Object, doc: Object, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult>;
    replaceOne(filter: Object, doc: Object, options: ReplaceOneOptions, callback: MongoCallback<UpdateWriteOpResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#save
    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */
    save(doc: Object, callback: MongoCallback<WriteOpResult>): void;
    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */
    save(doc: Object, options?: CollectionOptions): Promise<WriteOpResult>;
    /** @deprecated Use insertOne, insertMany, updateOne or updateMany */
    save(doc: Object, options: CollectionOptions, callback: MongoCallback<WriteOpResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#stats
    stats(callback: MongoCallback<CollStats>): void;
    stats(options?: { scale: number }): Promise<CollStats>;
    stats(options: { scale: number }, callback: MongoCallback<CollStats>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#update
    /** @deprecated use updateOne, updateMany or bulkWrite */
    update(filter: Object, update: Object, callback: MongoCallback<WriteOpResult>): void;
    /** @deprecated use updateOne, updateMany or bulkWrite */
    update(filter: Object, update: Object, options?: ReplaceOneOptions & { multi?: boolean }): Promise<WriteOpResult>;
    /** @deprecated use updateOne, updateMany or bulkWrite */
    update(filter: Object, update: Object, options: ReplaceOneOptions & { multi?: boolean }, callback: MongoCallback<WriteOpResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateMany
    updateMany(filter: Object, update: Object, callback: MongoCallback<UpdateWriteOpResult>): void;
    updateMany(filter: Object, update: Object, options?: { upsert?: boolean; w?: any; wtimeout?: number; j?: boolean; }): Promise<UpdateWriteOpResult>;
    updateMany(filter: Object, update: Object, options: { upsert?: boolean; w?: any; wtimeout?: number; j?: boolean; }, callback: MongoCallback<UpdateWriteOpResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#updateOne
    updateOne(filter: Object, update: Object, callback: MongoCallback<UpdateWriteOpResult>): void;
    updateOne(filter: Object, update: Object, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult>;
    updateOne(filter: Object, update: Object, options: ReplaceOneOptions, callback: MongoCallback<UpdateWriteOpResult>): void;
}

// Documentation: http://docs.mongodb.org/manual/reference/command/collStats/
//TODO complete this
export interface CollStats {
    // Namespace.
    ns: string;
    // Number of documents.
    count: number;
    // Collection size in bytes.
    size: number;
    // Average object size in bytes.
    avgObjSize: number;
    // (Pre)allocated space for the collection in bytes.
    storageSize: number;
    // Number of extents (contiguously allocated chunks of datafile space).
    numExtents: number;
    // Number of indexes.
    nindexes: number;
    // Size of the most recently created extent in bytes.
    lastExtentSize: number;
    // Padding can speed up updates if documents grow.
    paddingFactor: number;
    userFlags: number;
    // Total index size in bytes.
    totalIndexSize: number;
    // Size of specific indexes in bytes.
    indexSizes: {
        _id_: number;
        username: number;
    };
    capped: boolean;
    maxSize: boolean;
    wiredTiger: any;
    indexDetails: any;
    ok: number;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#aggregate
export interface CollectionAggregationOptions {
    readPreference?: ReadPreference | string;
    // Return the query as cursor, on 2.6 > it returns as a real cursor
    // on pre 2.6 it returns as an emulated cursor.
    cursor?: { batchSize: number };
    // Explain returns the aggregation execution plan (requires mongodb 2.6 >).
    explain?: boolean;
    // lets the server know if it can use disk to store
    // temporary results for the aggregation (requires mongodb 2.6 >).
    allowDiskUse?: boolean;
    // specifies a cumulative time limit in milliseconds for processing operations
    // on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.
    maxTimeMS?: boolean;
    // Allow driver to bypass schema validation in MongoDB 3.2 or higher.
    bypassDocumentValidation?: boolean;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertMany
export interface CollectionInsertManyOptions {
    // The write concern.
    w?: number | string;
    // The write concern timeout.
    wtimeout?: number;
    // Specify a journal write concern.
    j?: boolean;
    // Serialize functions on any object.
    serializeFunctions?: boolean;
    //Force server to assign _id values instead of driver.
    forceServerObjectId?: boolean;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite
export interface CollectionBluckWriteOptions {
    // The write concern.
    w?: number | string;
    // The write concern timeout.
    wtimeout?: number;
    // Specify a journal write concern.
    j?: boolean;
    // Serialize functions on any object.
    serializeFunctions?: boolean;
    // Execute write operation in ordered or unordered fashion.
    ordered?: boolean;
    // Allow driver to bypass schema validation in MongoDB 3.2 or higher.
    bypassDocumentValidation?: boolean;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~BulkWriteOpResult
export interface BulkWriteOpResultObject {
    insertedCount?: number;
    matchedCount?: number;
    modifiedCount?: number;
    deletedCount?: number;
    upsertedCount?: number;
    insertedIds?: any;
    upsertedIds?: any;
    result?: any;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#count
export interface MongoCountPreferences {
    // The limit of documents to count.
    limit?: number;
    // The number of documents to skip for the count.
    skip?: boolean;
    // An index name hint for the query.
    hint?: string;
    // The preferred read preference
    readPreference?: ReadPreference | string;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~deleteWriteOpResult
export interface DeleteWriteOpResultObject {
    //The raw result returned from MongoDB, field will vary depending on server version.
    result: {
        //Is 1 if the command executed correctly.
        ok?: number;
        //The total count of documents deleted.
        n?: number;
    }
    //The connection object used for the operation.
    connection?: any;
    //The number of documents deleted.
    deletedCount?: number;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~findAndModifyWriteOpResult
export interface FindAndModifyWriteOpResultObject {
    //Document returned from findAndModify command.
    value?: any;
    //The raw lastErrorObject returned from the command.
    lastErrorObject?: any;
    //Is 1 if the command executed correctly.
    ok?: number;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOneAndReplace
export interface FindOneAndReplaceOption {
    projection?: Object;
    sort?: Object;
    maxTimeMS?: number;
    upsert?: boolean;
    returnOriginal?: boolean;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoHaystackSearch
export interface GeoHaystackSearchOptions {
    readPreference?: ReadPreference | string;
    maxDistance?: number;
    search?: Object;
    limit?: number;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#geoNear
export interface GeoNearOptions {
    readPreference?: ReadPreference | string;
    num?: number;
    minDistance?: number;
    maxDistance?: number;
    distanceMultiplier?: number;
    query?: Object;
    spherical?: boolean;
    uniqueDocs?: boolean;
    includeLocs?: boolean;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Code.html
export class Code {
    constructor(code: string | Function, scope?: Object)
    code: string | Function;
    scope: any;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#deleteMany
export interface CollectionOptions {
    //The write concern.
    w?: number | string;
    //The write concern timeout.
    wtimeout?: number;
    //Specify a journal write concern.
    j?: boolean;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html
export interface OrderedBulkOperation {
    length: number;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#execute
    execute(callback: MongoCallback<BulkWriteResult>): void;
    execute(options?: FSyncOptions): Promise<BulkWriteResult>;
    execute(options: FSyncOptions, callback: MongoCallback<BulkWriteResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#find
    find(selector: Object): FindOperatorsOrdered;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/OrderedBulkOperation.html#insert
    insert(doc: Object): OrderedBulkOperation;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/BulkWriteResult.html
export interface BulkWriteResult {
    ok: number;
    nInserted: number;
    nUpdated: number;
    nUpserted: number;
    nModified: number;
    nRemoved: number;

    getInsertedIds(): Array<Object>;
    getLastOp(): Object;
    getRawResponse(): Object;
    getUpsertedIdAt(index: number): Object;
    getUpsertedIds(): Array<Object>;
    getWriteConcernError(): WriteConcernError;
    getWriteErrorAt(index: number): WriteError;
    getWriteErrorCount(): number;
    getWriteErrors(): Array<Object>;
    hasWriteErrors(): boolean;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/WriteError.html
export interface WriteError {
    //Write concern error code.
    code: number;
    //Write concern error original bulk operation index.
    index: number;
    //Write concern error message.
    errmsg: string;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/WriteConcernError.html
export interface WriteConcernError {
    //Write concern error code.
    code: number;
    //Write concern error message.
    errmsg: string;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/FindOperatorsOrdered.html
export interface FindOperatorsOrdered {
    delete(): OrderedBulkOperation;
    deleteOne(): OrderedBulkOperation;
    replaceOne(doc: Object): OrderedBulkOperation;
    update(doc: Object): OrderedBulkOperation;
    updateOne(doc: Object): OrderedBulkOperation;
    upsert(): FindOperatorsOrdered;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html
export interface UnorderedBulkOperation {
    //http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#execute
    execute(callback: MongoCallback<BulkWriteResult>): void;
    execute(options?: FSyncOptions): Promise<BulkWriteResult>;
    execute(options: FSyncOptions, callback: MongoCallback<BulkWriteResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#find
    find(selector: Object): FindOperatorsUnordered;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/UnorderedBulkOperation.html#insert
    insert(doc: Object): UnorderedBulkOperation;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/FindOperatorsUnordered.html
export interface FindOperatorsUnordered {
    length: number;
    remove(): UnorderedBulkOperation;
    removeOne(): UnorderedBulkOperation;
    replaceOne(doc: Object): UnorderedBulkOperation;
    update(doc: Object): UnorderedBulkOperation;
    updateOne(doc: Object): UnorderedBulkOperation;
    upsert(): FindOperatorsUnordered;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne
export interface FindOneOptions {
    limit?: number,
    sort?: Array<any> | Object,
    fields?: Object,
    skip?: number,
    hint?: Object,
    explain?: boolean,
    snapshot?: boolean,
    timeout?: boolean,
    tailable?: boolean,
    batchSize?: number,
    returnKey?: boolean,
    maxScan?: number,
    min?: number,
    max?: number,
    showDiskLoc?: boolean,
    comment?: string,
    raw?: boolean,
    readPreference?: ReadPreference | string,
    partial?: boolean,
    maxTimeMs?: number
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~insertWriteOpResult
export interface InsertWriteOpResult {
    insertedCount: number;
    ops: Array<any>;
    insertedIds: Array<ObjectID>;
    connection: any;
    result: { ok: number, n: number }
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#insertOne
export interface CollectionInsertOneOptions {
    // The write concern.
    w?: number | string;
    // The write concern timeout.
    wtimeout?: number;
    // Specify a journal write concern.
    j?: boolean;
    // Serialize functions on any object.
    serializeFunctions?: boolean;
    //Force server to assign _id values instead of driver.
    forceServerObjectId?: boolean;
    //Allow driver to bypass schema validation in MongoDB 3.2 or higher.
    bypassDocumentValidation?: boolean
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~insertOneWriteOpResult
export interface InsertOneWriteOpResult {
    insertedCount: number;
    ops: Array<any>;
    insertedId: ObjectID;
    connection: any;
    result: { ok: number, n: number }
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#parallelCollectionScan
export interface ParallelCollectionScanOptions {
    readPreference?: ReadPreference | string;
    batchSize?: number;
    numCursors?: number;
    raw?: boolean;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#replaceOne
export interface ReplaceOneOptions {
    upsert?: boolean;
    w?: number | string;
    wtimeout?: number;
    j?: boolean;
    bypassDocumentValidation?: boolean;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~updateWriteOpResult
export interface UpdateWriteOpResult {
    result: { ok: number, n: number, nModified: number };
    connection: any;
    matchedCount: number;
    modifiedCount: number;
    upsertedCount: number;
    upsertedId: { _id: ObjectID };
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#mapReduce
export interface MapReduceOptions {
    readPreference?: ReadPreference | string;
    out?: Object;
    query?: Object;
    sort?: Object;
    limit?: number;
    keeptemp?: boolean;
    finalize?: Function | string;
    scope?: Object;
    jsMode?: boolean;
    verbose?: boolean;
    bypassDocumentValidation?: boolean
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#~WriteOpResult
export interface WriteOpResult {
    ops: Array<any>;
    connection: any;
    result: any;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/external-Readable.html
export interface Readable {
    pause(): void;
    pipe(destination: Writable, options?: Object): void;
    read(size: number): string | Buffer | void;
    resume(): void;
    setEncoding(encoding: string): void;
    unpipe(destination?: Writable): void;
    unshift(stream: Buffer | string): void;
    wrap(stream: Stream): void;
}

export interface Writable { }
export interface Stream { }

//http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~resultCallback
export type CursorResult = any | void | boolean;

//http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html
export interface Cursor extends Readable, NodeJS.EventEmitter {

    sortValue: string;
    timeout: boolean;
    readPreference: ReadPreference;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html
    addCursorFlag(flag: string, value: boolean): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addQueryModifier
    addQueryModifier(name: string, value: boolean): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#batchSize
    batchSize(value: number): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#clone
    clone(): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#close
    close(): Promise<CursorResult>;
    close(callback: MongoCallback<CursorResult>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#comment
    comment(value: string): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count
    count(applySkipLimit: boolean, callback: MongoCallback<number>): void;
    count(applySkipLimit: boolean, options?: CursorCommentOptions): Promise<number>;
    count(applySkipLimit: boolean, options: CursorCommentOptions, callback: MongoCallback<number>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#explain
    explain(): Promise<CursorResult>;
    explain(callback: MongoCallback<CursorResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#filter
    filter(filter: Object): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#forEach
    forEach(iterator: IteratorCallback, callback: EndCallback): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hasNext
    hasNext(): Promise<boolean>;
    hasNext(callback: MongoCallback<boolean>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#hint
    hint(hint: Object): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#isClosed
    isClosed(): boolean;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#limit
    limit(value: number): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#map
    map(transform: Function): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#max
    max(max: number): Cursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxAwaitTimeMS
    maxAwaitTimeMS(value: number): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxScan
    maxScan(maxScan: Object): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#maxTimeMS
    maxTimeMS(value: number): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#min
    min(min: number): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next
    next(): Promise<CursorResult>;
    next(callback: MongoCallback<CursorResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#pause
    pause(): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#pipe
    pipe(destination: Writable, options?: Object): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#project
    project(value: Object): Cursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#read
    read(size: number): string | Buffer | void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#resume
    resume(): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#next
    returnKey(returnKey: Object): Cursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#rewind
    rewind(): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setCursorOption
    setCursorOption(field: string, value: Object): Cursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setEncoding
    setEncoding(encoding: string): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#setReadPreference
    setReadPreference(readPreference: string | ReadPreference): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#showRecordId
    showRecordId(showRecordId: Object): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#skip
    skip(value: number): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#snapshot
    snapshot(snapshot: Object): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#sort
    sort(keyOrList: string | Object[] | Object | Object, direction?: number): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#stream
    stream(options?: { transform?: Function }): Cursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#toArray
    toArray(): Promise<any[]>;
    toArray(callback: MongoCallback<any[]>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#unpipe
    unpipe(destination?: Writable): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#unshift
    unshift(stream: Buffer | string): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#wrap
    wrap(stream: Stream): void;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#count
export interface CursorCommentOptions {
    skip?: number;
    limit?: number;
    maxTimeMS?: number;
    hint?: string;
    readPreference?: ReadPreference | string;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~iteratorCallback
export interface IteratorCallback {
    (doc: any): void;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#~endCallback
export interface EndCallback {
    (error: MongoError): void;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#~resultCallback
export type AggregationCursorResult = any | void;

//http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html
export interface AggregationCursor extends Readable, NodeJS.EventEmitter {
    // http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#batchSize
    batchSize(value: number): AggregationCursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#clone
    clone(): AggregationCursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#close
    close(): Promise<AggregationCursorResult>;
    close(callback: MongoCallback<AggregationCursorResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#each
    each(callback: MongoCallback<AggregationCursorResult>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#explain
    explain(): Promise<AggregationCursorResult>;
    explain(callback: MongoCallback<AggregationCursorResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#geoNear
    geoNear(document: Object): AggregationCursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#group
    group(document: Object): AggregationCursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#isClosed
    isClosed(): boolean;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#limit
    limit(value: number): AggregationCursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#match
    match(document: Object): AggregationCursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#maxTimeMS
    maxTimeMS(value: number): AggregationCursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#next
    next(): Promise<AggregationCursorResult>;
    next(callback: MongoCallback<AggregationCursorResult>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#out
    out(destination: string): AggregationCursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#pause
    pause(): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#pipe
    pipe(destination: Writable, options?: Object): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#project
    project(document: Object): AggregationCursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#read
    read(size: number): string | Buffer | void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#redact
    redact(document: Object): AggregationCursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#resume
    resume(): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#rewind
    rewind(): AggregationCursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#setEncoding
    setEncoding(encoding: string): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#skip
    skip(value: number): AggregationCursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#sort
    sort(document: Object): AggregationCursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#toArray
    toArray(): Promise<any[]>;
    toArray(callback: MongoCallback<any[]>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unpipe
    unpipe(destination?: Writable): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unshift
    unshift(stream: Buffer | string): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#unwind
    unwind(field: string): AggregationCursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/AggregationCursor.html#wrap
    wrap(stream: Stream): void;
}

//http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html
export interface CommandCursor extends Readable, NodeJS.EventEmitter {
    // http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#batchSize
    batchSize(value: number): CommandCursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#clone
    clone(): CommandCursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#close
    close(): Promise<AggregationCursorResult>;
    close(callback: MongoCallback<AggregationCursorResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#each
    each(callback: MongoCallback<AggregationCursorResult>): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#isClosed
    isClosed(): boolean;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#maxTimeMS
    maxTimeMS(value: number): CommandCursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#next
    next(): Promise<AggregationCursorResult>;
    next(callback: MongoCallback<AggregationCursorResult>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#pause
    pause(): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#pipe
    pipe(destination: Writable, options?: Object): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#read
    read(size: number): string | Buffer | void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#resume
    resume(): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#rewind
    rewind(): CommandCursor;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#setEncoding
    setEncoding(encoding: string): void;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#setReadPreference
    setReadPreference(readPreference: string | ReadPreference): CommandCursor;
    // http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#toArray
    toArray(): Promise<any[]>;
    toArray(callback: MongoCallback<any[]>): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#unpipe
    unpipe(destination?: Writable): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#unshift
    unshift(stream: Buffer | string): void;
    //http://mongodb.github.io/node-mongodb-native/2.1/api/CommandCursor.html#wrap
    wrap(stream: Stream): void;
}
}

// Generated by typings
// Source: https://raw.githubusercontent.com/effervescentia/typed-sails/374eeb5ec370931630f2cc5ad5e91bffe51859fd/index.d.ts
declare module 'sails' {
import {
  CookieOptions,
  MediaType,
  Request as ExprRequest,
  Response as ExprResponse
} from 'express';
import { EventEmitter } from 'events';
import { Readable, Writable } from 'stream';
import { Collection } from '~sails~mongodb';

var sails: sails.Sails;

namespace sails {

  interface Sails extends EventEmitter {
    constructor(config?: any): void;
    log: Logger;
    models: any;
    config: any & {
      explicitHost?: string,
      proxyHost?: string,
      proxyPort?: number,
      port: number,
      environment: string,
      hookTimeout: number,
      keepResponseErrors: boolean,
      ssl: boolean | { key: string, cert: string } | { pfx: string },
      bootstrap(cb: Function): void,
      csrf: Config.CSRF,
      globals: Config.Globals | boolean,
      http: Config.HTTP,
      i18n: Config.i18n,
      log: Config.Log,
      models: Config.Models,
      session: Config.Session,
      sockets: Config.Sockets,
      views: Config.Views
    };
    sockets: any;
    io: SocketIO.Server;
    hooks: any & {
      blueprints: Hooks.Blueprints & any,
      controllers: Hooks.Controllers & any,
      cors: Hooks.CORS & any,
      csrf: Hooks.CSRF & any,
      grunt: Hooks.Grunt & any,
      http: Hooks.HTTP & any,
      i18n: Hooks.i18n & any,
      logger: Hooks.Logger & any,
      moduleloader: Hooks.ModuleLoader & any,
      policies: Hooks.Policies & any,
      pubsub: Hooks.PubSub & any,
      request: Hooks.Request & any,
      responses: Hooks.Responses & any,
      services: Hooks.Services & any,
      session: Hooks.Session & any,
      userconfig: Hooks.UserConfig & any,
      userhooks: Hooks.UserHooks & any,
      views: Hooks.Views & any
    };

    load(options?: any, cb?: (err: Error, sails: Sails) => void): void;
    lift(options?: any, cb?: (err: Error, sails: Sails) => void): void;
    lower(cb?: (err: Error) => void): void;

    request(url: string | Request, cb?: (err: Error, response: any, body: any) => void): Readable;
    request(url: string, body: any, cb?: (err: Error, response: any, body: any) => void): Readable;

    getBaseUrl(): string;
    getRouteFor(target: string): Route;
    getUrlFor(target: string): string;
    after(event: string, listener: Function): this;
  }

  type ApplicationLifecycle = 'ready' | 'lifted' | 'lowered';

  interface Request extends ExprRequest {
    /**
     * @http
     * @websocket
     */
    options: any & RouteTarget & {
      values?: any,
      where?: any
    };
    /**
     * @http
     * @websocket
     */
    body: any;
    /**
     * @http
     * @websocket
     */
    headers: any;
    /**
     * @http
     * @websocket
     */
    query: any;
    /**
     * @http
     */
    file(field: string): void;
    /**
     * @http
     * @websocket
     */
    param(name: string, defaultValue?: any): any;
    /**
     * @http
     */
    cookies: any;
    /**
     * @http
     */
    signedCookies: any;
    /**
     * @http
     */
    get(field: string): any;
    /**
     * @http
     */
    accepts(type: string | string[]): any;
    /**
     * @http
     */
    accepted: MediaType[];
    /**
     * @http
     */
    is(type: string): boolean;
    /**
     * @http
     * @websocket
     */
    ip: string;
    /**
     * @http
     */
    ips: string[];
    /**
     * @http
     */
    path: string;
    /**
     * @http
     */
    host: string;
    /**
     * @http
     */
    fresh: boolean;
    /**
     * @http
     */
    stale: boolean;
    /**
     * @http
     */
    xhr: boolean;
    /**
     * @http
     * @websocket
     */
    protocol: string;
    /**
     * @http
     */
    secure: boolean;
    /**
     * @http
     * @websocket
     */
    session: string;
    /**
     * @http
     */
    subdomains: string[];
    /**
     * @http
     * @websocket
     */
    method: string;
    /**
     * @http
     */
    originalUrl: string;
    /**
     * @http
     */
    acceptedLanguages: string[];
    /**
     * @http
     */
    acceptedCharsets: string[];
    /**
     * @http
     */
    acceptsCharset(charset: string): boolean;
    /**
     * @http
     */
    acceptsLanguage(charset: string): boolean;
    /**
     * @http
     * @websocket
     */
    isSocket: boolean;
    /**
     * @http
     * @websocket
     */
    params: (any & { all: any }) | string[];
    /**
     * @websocket
     */
    // socket: {
    //   id: string,
    //   join(room: string, cb?: (err?: Error) => void): void,
    //   leave(room: string, cb?: Function): void,
    //   broadcast(roomNames: string | string[], opts?: any): void
    // };
    /**
     * @websocket
     */
    transport: string;
    /**
     * @http
     * @websocket
     */
    url: string;
    /**
     * @http
     * @websocket
     */
    wantsJSON: boolean;
  }

  interface Response extends ExprResponse {
    /**
     * @http
     * @websocket
     */
    status(statusCode: number): Response;
    /**
     * @http
     */
    set(headers: any): Response;
    set(header: string, value: string): Response;
    /**
     * @http
     */
    get(header: string): string;
    /**
     * @http
     */
    cookie(name: string, value: string, opts?: CookieOptions): Response;
    /**
     * @http
     */
    clearCookie(name: string, opts?: CookieOptions): Response;
    /**
     * @http
     */
    location(url: string): Response;
    /**
     * @http
     * @websocket
     */
    send(body: any): Response;
    send(httpStatus: number, body: any): Response;
    /**
     * @http
     * @websocket
     */
    json(body: any): Response;
    json(httpStatus: number, body: any): Response;
    /**
     * @http
     * @websocket
     */
    jsonp(body: any): Response;
    jsonp(httpStatus: number, body: any): Response;
    /**
     * @http
     */
    type(type: string): Response;
    /**
     * @http
     */
    attachment(filename?: string): Response;
    /**
     * @http
     */
    view(pathToView: string, locals?: any): void;
    view(locals?: any): void;
    /**
     * @http
     * @websocket
     */
    forbidden(data?: any, pathToView?: string): void;
    /**
     * @http
     * @websocket
     */
    badRequest(data?: any, pathToView?: string): void;
    /**
     * @http
     * @websocket
     */
    ok(data?: any, pathToView?: string): void;
    /**
     * @http
     * @websocket
     */
    negotiate(err: Error): void;
    /**
     * @http
     * @websocket
     */
    notFound(data?: any, pathToView?: string): void;
    /**
     * @http
     * @websocket
     */
    serverError(data?: any, pathToView?: string): void;
  }

  interface RouteTarget {
    skipAssets: boolean;
    skipRegex: RegExp;
    locals: any;
    cors: boolean | string | any;
    populate: boolean;
    skip: any;
    limit: any;
    sort: any;
    where: any;
  }

  interface Route {
    method: string;
    url: string;
  }

  interface Socket {
    blast(data: any, socketToOmit?: Request): void;
    blast(eventName: string, data: any, socketToOmit?: Request): void;

    broadcast(roomNames: string | string[], data: any, socketToOmit?: Request): void;
    broadcast(roomNames: string | string[], eventName: string, data: any, socketToOmit?: Request): void;

    getId(req: Request): string;

    leave(socket: string | Request, roomName: string, cb?: (err?: Error) => void): void;

    leaveAll(roomName: string, cb?: (err?: Error) => void): void;

    join(socket: string | Request, roomName: string, cb?: (err?: Error) => void): void;

    removeRoomMembersFromRooms(sourceRoom: string, destRooms: string | string[], cb?: (err?: Error) => void): void;

    /**
     * @deprecated
     */
    emit(ids: string | string[], event: string, data: any): void;
    /**
     * @deprecated
     */
    id(req: Request): string;
    /**
     * @deprecated
     */
    subscribers(roomName: string, cb?: (err: Error, socketIds: string[]) => void): void;
    /**
     * @deprecated
     */
    rooms(): string[];
    /**
     * @deprecated
     */
    socketRooms(socket: Socket): string[];
  }

  interface SocketClient {
    off(identity: string, handler: Function): void;
    post(url: string, data?: any, handler?: (data: any, jwres: SocketResponse) => void): void;
    on(identity: string, handler: Function): void;
    get(url: string, data?: any, handler?: (data: any, jwres: SocketResponse) => void): void;
    put(url: string, data?: any, handler?: (data: any, jwres: SocketResponse) => void): void;
    delete(url: string, data?: any, handler?: (data: any, jwres: SocketResponse) => void): void;
    request(options: SocketRequest, handler?: (data: any, jwres: SocketResponse) => void): void;
  }

  interface SocketRequest {
    method: string;
    url: string;
    data?: any;
    headers?: any;
  }

  interface SocketResponse {
    headers: any;
    body: any;
    statusCode: number;
  }

  interface Logger {
    (...args: any[]): void;
    silly(...args: any[]): void;
    verbose(...args: any[]): void;
    debug(...args: any[]): void;
    info(...args: any[]): void;
    warn(...args: any[]): void;
    error(...args: any[]): void;
  }

  interface Model {
    save(cb: (err?: Error) => void): WaterlinePromise<Result> | void;

    count(criteria?: number | string | any, cb?: (err: Error, count: number) => void): WaterlinePromise<number>;

    create(params: any, cb?: (err: Error, created: Result) => void): WaterlinePromise<Result>;
    create(params: any[], cb?: (err: Error, created: Result[]) => void): WaterlinePromise<Result[]>;

    destroy(criteria: any, cb?: (err?: Error) => void): WaterlinePromise<Record[]>;

    find(criteria: any, cb?: (err: Error, found: Result[]) => void): WaterlinePromise<Result>;

    findOne(criteria: any, cb?: (err: Error, found?: Result) => void): WaterlinePromise<Result>;

    findOrCreate(criteria: any | any[], params: any | any[], cb?: (err: Error, createdOrFound?: Result | Result[]) => void): WaterlinePromise<Result | Result[]>;

    /**
     * @mongo
     */
    native(cb: (err: Error, mongoCollection: Collection) => void): WaterlinePromise<Collection>;

    /**
     * @sql
     */
    query(criteria: string, cb?: (err: Error, found: Result[]) => void): WaterlinePromise<Result[]>;

    stream(criteria: any, overrides?: { end: Function, write: Function }): Writable;

    update(criteria: any | any[], updates: any | any[], cb?: (err: Error, updated: any[]) => void): WaterlinePromise<Result[]>;

    find(): QueryBuilder;

    // Resourceful Pub / Sub
    message(id: string | number, data: any, req?: Request): void;

    publishAdd(id: string | number, association: string, added: string | number | ({ id: string | number } & any), req?: Request, options?: PublishOptions.Add): void;

    publishCreate(data: any, req?: Request): void;

    publishDestroy(id: string | number, req?: Request, options?: PublishOptions.Destroy): void;

    publishRemove(id: string | number, association: string, foreignKey: string, req?: Request, options?: PublishOptions.Remove): void;

    publishUpdate(id: string | number, changes: any, req?: Request, options?: PublishOptions.Update): void;

    subscribe(req: Request, ids: string[] | number[]): void;

    unwatch(req: Request): void;

    unsubscribe(req: Request, ids: string[] | number[]): void;

    watch(req: Request): void;

    /**
     * @deprecated
     */
    subscribers(record: string | number | ({ ids: string | number } & any), contexts?: string | string[]): void;
  }

  namespace PublishOptions {
    interface Add {
      noReverse: boolean;
    }
    interface Destroy {
      previous: any;
    }
    interface Remove {
      noReverse: boolean;
    }
    interface Update {
      noReverse: boolean;
      previous: any;
    }
  }

  interface QueryBuilder extends Promise<Result | Result[]> {
    exec(cb: (err: Error, result: Result | Result[]) => void): void;

    limit(limit: number): this;
    skip(offset: number): this;
    sort(criteria: string): this;
    where(criteria: any): this;
    populate(association: string, criteria?: any): this;
  }

  interface WaterlinePromise<T> extends Promise<T> {
    exec(cb: (err: Error, results: Result[]) => void): void;
    exec(cb: (err: Error, result: Result) => void): void;
  }

  interface Record {
    id: number;
    createdAt: Date;
    updatedAt: Date;
  }

  interface QueryResult extends Record {
    toJSON(): any;
    save(cb?: (err: Error, savedRecord: any) => void): WaterlinePromise<any>;
    destroy(): Promise<QueryResult[]>;
    toObject(): any;
  }

  type Result = QueryResult & any;

  namespace Config {
    interface Blueprints {
      /**
       * Optional mount path prefix for blueprints (the automatically
       * bound routes in your controllers) e.g. '/api/v2'
       * @type {string}
       */
      prefix: string;
      /**
       * Optional mount path prefix for RESTful blueprints (the automatically
       * bound RESTful routes for your controllers and models) e.g. '/api/v2'.
       * Will be joined to your prefix config. e.g. prefix: '/api' and
       * restPrefix: '/rest', RESTful actions will be available under /api/rest
       * @type {string}
       */
      restPrefix: string;
      /**
       * Automatic REST blueprints enabled? e.g. 'get /:controller/:id?'
       * 'post /:controller' 'put /:controller/:id' 'delete /:controller/:id'
       * @type {boolean}
       */
      rest: boolean;
      /**
       * Whether routes are automatically generated for every action in your
       * controllers (also maps index to /:controller) '/:controller',
       * '/:controller/index', and '/:controller/:action'
       * @type {boolean}
       */
      actions: boolean;
      /**
       * These CRUD shortcuts exist for your convenience during development,
       * but you'll want to disable them in production.: '/:controller/find/:id?',
       * '/:controller/create', '/:controller/update/:id', and '/:controller/destroy/:id'
       * @type {boolean}
       */
      shortcuts: boolean;
      /**
       * Forces the blueprint actions to send messages to all sockets,
       * including the requesting socket
       * @type {boolean}
       */
      mirror: boolean;
      /**
       * Optionally use plural controller names in blueprint routes, e.g.
       * /users for api/controllers/UserController.js.
       * @type {boolean}
       */
      pluralize: boolean;
      /**
       * Whether the blueprint controllers should populate model fetches with
       * data from other models which are linked by associations. If you have a
       * lot of data in one-to-many associations, leaving this on may result in
       * very heavy api calls.
       * @type {boolean}
       */
      populate: boolean;
      /**
       * The default number of records to show in the response from a "find"
       * action. Doubles as the default size of populated arrays if populate is true.
       * @type {boolean}
       */
      defaultLimit: boolean;
      /**
       * Whether to run Model.watch() in the
       * find and findOne blueprint actions. Can be overridden on a per-model basis.
       * @type {boolean}
       */
      autoWatch: boolean;
      /**
       * Optionally wrap blueprint JSON responses in a JSONP callback using
       * res.jsonp() from Express 3.
       * @type {boolean}
       */
      jsonp: boolean;
    }
    interface CORS {
      /**
       * Indicates whether the other CORS configuration settings should apply
       * to every route in the app by default.
       * @type {boolean}
       */
      allRoutes: boolean;
      /**
       * Comma-delimited list of default hosts (beginning with http:// or https://)
       * to give access to, or * to allow all domains CORS access. If allRoutes
       * is true and origin is *, then your app will be fully accessible to sites
       * hosted on foreign domains (except for routes which have their own CORS settings).
       * @type {string}
       */
      origin: string;
      /**
       * Comma-delimited list of methods that are allowed to be used in CORS requests.
       * This is only used in response to preflight requests, so the inclusion of
       * GET, POST, OPTIONS and HEAD, although customary, is not necessary.
       * @type {string}
       */
      methods: string;
      /**
       * Comma-delimited list of headers that are allowed to be sent with CORS
       * requests. This is only used in response to preflight requests.
       * @type {string}
       */
      headers: string;
      /**
       * List of headers that browsers will be allowed to access.
       * @type {string}
       */
      exposeHeaders: string;
      /**
       * Indicates whether cookies can be shared in CORS requests.
       * @type {boolean}
       */
      credentials: boolean;
      /**
       * Indicates how Sails should respond to requests from disallowed origins.
       * In normal mode (0), Sails processes all requests normally, simply setting
       * the appropriate CORS headers and leaving it to the client to determine
       * how to handle the response. In high mode (1), Sails will send back a 403
       * response to requests from disallowed origins, if the origin starts with
       * http or https. In very high mode (2), Sails will send back a 403 response
       * to requests from disallowed origins, regardless of the origin protocol.
       * @type {number}
       */
      securityLevel: number;
    }
    interface CSRF {
      /**
       * CSRF protection is disabled by default to facilitate development.
       * To turn it on, just set sails.config.csrf to true, or for more
       * flexibility, specify a dictionary with any of the properties described below.
       * @type {boolean | any}
       */
      csrf: boolean | {
        /**
         * Whether to activate the /csrfToken route, which will return the
         * current CSRF token value which can then be used in AJAX requests.
         * @type {boolean}
         */
        grantTokenViaAjax: boolean,
        /**
         * Comma-delimited list of origins that are allowed to access the CSRF
         * token via the /csrfToken shadow route. This is separate from the
         * other CORS settings, which do not apply to /csrfToken.
         * @type {string}
         */
        origin: string,
        /**
         * Comma-delimited list of routes where CSRF protection is disabled.
         * @type {string}
         */
        routesDisabled: string
      };
    }
    interface Globals {
      /**
       * Expose the sails instance representing your app.
       * If this is disabled, you can still get access via req._sails.
       * @type {boolean}
       */
      sails: boolean;
      /**
       * Expose each of your app's models as global variables (using their "globalId").
       * E.g. a model defined in api/models/User.js would have a globalId of
       * User by default. If this is disabled, you can still access your
       * models via sails.models.*.
       * @type {boolean}
       */
      models: boolean;
      /**
       * Expose each of your app's services as global variables (using their "globalId").
       * E.g. a service defined in api/services/NaturalLanguage.js would have a
       * globalId of NaturalLanguage by default. If this is disabled, you can
       * still access your services via sails.services.*.
       * @type {boolean}
       */
      services: boolean;
      /**
       * Expose the lodash installed in Sails core as a global variable.
       * If this is disabled, like any other node module you can always run
       * npm install lodash --save, then var _ = require('lodash') at the top of any file.
       * @type {boolean}
       */
      _: boolean;
      /**
       * this is disabled, like any other node module you can always run
       * npm install async --save, then var async = require('async') at the top of any file.
       * @type {boolean}
       */
      async: boolean;
    }
    interface HTTP {
      /**
       * A dictionary of all HTTP middleware functions your app will run on
       * every incoming HTTP request.
       * @type {any}
       */
      middleware: any | {
        /**
         * An array of middleware names (strings) indicating the order in
         * which middleware should be run for all incoming HTTP requests.
         * @type {string[]}
         */
        order: string[]
      };
      /**
       * The number of milliseconds to cache static assets when your app is
       * running in a 'production' environment. These are any flat files like
       * images, scripts, stylesheets, etc. that are served by Express' static
       * middleware (by default, these files are served from .tmp/public,
       * a hidden folder compiled by Grunt).
       * @type {number}
       */
      cache: number;
      /**
       * SSL only: options to send directly to the Node https module when creating the server.
       * These will be merged with your SSL settings, if any.
       * @type {any}
       */
      serverOptions: any;
    }
    interface i18n {
      /**
       * List of supported locale codes
       * @type {string[]}
       */
      locales: string[];
      /**
       * The project-relative path to the folder containing your locale translations (i.e. stringfiles)
       * @type {string}
       */
      localesDirectory: string;
      /**
       * The default locale for the site. Note that this setting will be overridden
       * for any request that sends an "Accept-Language" header (i.e. most browsers),
       * but it's still useful if you need to localize the response for requests
       * made by non-browser clients (e.g. cURL).
       * @type {string}
       */
      defaultLocale: string;
      /**
       * Whether to automatically add new keys to locale (translation) files
       * when they are encountered during a request.
       * @type {boolean}
       */
      updateFiles: boolean;
    }
    interface Log {
      /**
       * Set the level of detail to be shown in your app's log
       * @type {string}
       */
      level: string;
      /**
       * Set to false to disable captain's log's handling of logging, logs will
       * instead be passed to the configured custom logger
       * @type {string}
       */
      inspect: string;
      /**
       * Set to the instance of a custom logger (such as winston) logs will
       * be passed through to the custom logger
       * @type {any}
       */
      custom: any;
    }
    interface Models {
      /**
       * The basic pieces of information to store about a model.
       * @type {any}
       */
      attributes: any;
      /**
       * How & whether Sails will attempt to automatically rebuild the tables/collections/etc. in your schema
       * @type {string}
       */
      migrate: string;
      /**
       * The default database connection any given model will use without a configured override
       * @type {string}
       */
      connection: string;
      /**
       * Toggle the automatic definition of a primary key in your model
       * @type {boolean}
       */
      autoPK: boolean;
      /**
       * Toggle the automatic definition of a property createdAt in your model
       * @type {boolean}
       */
      autoCreatedAt: boolean;
      /**
       * Toggle the automatic definition of a property updatedAt in your model
       * @type {boolean}
       */
      autoUpdatedAt: boolean;
      /**
       * Used to specify database table name for the model
       * @type {string}
       */
      tableName: string;
      /**
       * Toggle the automatic creation of Dynamic Finders
       * @type {boolean}
       */
      dynamicFinders: boolean;
    }
    interface Session {
      /**
       * If left unspecified, Sails will use the default memory store bundled in
       * the underlying session middleware. In production, you should specify the
       * package name of a scalable session store instead (e.g. connect-redis).
       * @type {string}
       */
      adapter: string;
      /**
       * Session key is set as sails.sid by default. This is the name of the key
       * which is added to the cookie of visitors to your site when sessions are
       * enabled (which is the case by default for Sails apps). If you are
       * running multiple different Sails apps from the same shared cookie
       * namespace (i.e. the top-level DNS domain, like frog-enthusiasts.net),
       * you must be especially careful to configure separate unique keys for each
       * separate app, otherwise the wrong cookie could be used (like crossing streams)
       * @type {string}
       */
      key: string;
      /**
       * This session secret is automatically generated when your new app is
       * created. Care should be taken any time this secret is changed in
       * production-- doing so will invalidate the sesssion cookies of your users,
       * forcing them to log in again. Note that this is also used as
       * the "cookie secret" for signed cookies.
       * @type {string}
       */
      secret: string;
    }
    interface Sockets {
      /**
       * The queue socket.io will use to deliver messages. Can be set to either
       * 'memory' or 'socket.io-redis'. If 'socket.io-redis' is specified, you
       * should run npm install socket.io-redis@~1.0.0 --save --save-exact.
       * @type {string}
       */
      adapter: string;
      /**
       * An array of allowed transport strategies. This should always match your
       * configuration in your socket client (i.e. sails.io.js).
       * @type {string[]}
       */
      transports: string[];
      /**
       * A function to run when a client-side socket disconnects from the server.
       * @type {Function}
       */
      afterDisconnect(session: any, socket: any, cb: Function): void;
      /**
       * This is a raw configuration option exposed from Engine.io. It indicates
       * whether to allow Socket.io clients to upgrade the transport that they
       * are using (e.g. start with polling, then upgrade to a true WebSocket connection).
       * @type {boolean}
       */
      allowUpgrades: boolean;
      /**
       * A function to run every time a new client-side socket attempts to connect
       * to the server which can be used to reject or allow the incoming connection.
       * Useful for tweaking your production environment to prevent DoS attacks,
       * or reject socket.io connections based on business-specific heuristics
       * (e.g. if stooges from a competing business create bots to post spam links
       * about their commercial product in your chat room). To define your own
       * custom logic, specify a function. As of Sails v0.11, Sails no longer
       * blocks incoming socket connections without cookies-- instead, cookies
       * (and by corollary- sessions) are granted automatically. If a requesting
       * socket.io client cannot receive a cookie (i.e. making a cross-origin
       * socket.io connection) the sails.io.js socket client will automatically
       * send a CORS+JSONP request to try and obtain one BEFORE CONNECTING (refer
       * to the grant3rdPartyCookie option above for details). In the antagonistic
       * scenario where even this fails, Sails will still grant a new cookie upon
       * connection, which allows for a one-time session.
       * @type {boolean}
       */
      beforeConnect: (handshake: any, cb: Function) => void | boolean;
      /**
       * This is a raw configuration option exposed from Engine.io. It indicates
       * the name of the HTTP cookie that contains the connecting socket.io
       * client's socket id. The cookie will be set when responding to the
       * initial Socket.io "handshake". Alternatively, may be set to false to
       * disable the cookie altogether. Note that the sails.io.js client does not
       * rely on this cookie, so it is disabled (set to false) by default for
       * enhanced security. If you are using socket.io directly and need to re-enable
       * this cookie, keep in mind that the conventional setting is "io".
       * @type {[type]}
       */
      cookie: boolean | string;
      /**
       * This is a raw configuration option exposed from Engine.io. It reflects
       * the maximum number of bytes or characters in a message when polling
       * before automatically closing the socket (to avoid DoS).
       * @type {number}
       */
      maxBufferSize: number;
      /**
       * Path that client-side sockets should connect to on the server
       * @type {string}
       */
      path: string;
      /**
       * This is a raw configuration option exposed from Engine.io. It reflects
       * the number of miliseconds to wait between "ping packets" (i.e. this is
       * what "heartbeats" has become, more or less)
       * @type {number}
       */
      pingInterval: number;
      /**
       * This is a raw configuration option exposed from Engine.io.
       * It reflects how many ms without a pong packet to wait before
       * considering a socket.io connection closed
       * @type {number}
       */
      pingTimeout: number;
      /**
       * When using the socket.io-redis adapter, this option allows you to specify
       * a custom Redis client (typically created with Redis.createClient) used
       * for publishing on channels used by Socket.io. If unspecified,
       * Sails will create a client for you.
       * @type {any}
       */
      pubClient: any;
      /**
       * Whether to include response headers in the JWR (JSON WebSocket Response)
       * originated for each socket request (e.g. io.socket.get() in the browser)
       * This doesn't affect direct socket.io usage-- only if you're communicating
       * with Sails via the request interpreter (e.g. making normal calls with the
       * sails.io.js browser SDK). This can be useful for squeezing out more performance
       * when tuning high-traffic apps, since it reduces total bandwidth usage.
       * However, since Sails v0.10, response headers are trimmed whenever possible,
       * so this option should almost never need to be used, even in extremely
       * high-scale applications.
       * @type {boolean}
       */
      sendResponseHeaders: boolean;
      /**
       * Whether to serve the default Socket.io client at /socket.io/socket.io.js.
       * Occasionally useful for advanced debugging.
       * @type {boolean}
       */
      serveClient: boolean;
      /**
       * When using the socket.io-redis adapter, this option allows you to specify
       * a custom Redis client (typically created with Redis.createClient) used
       * for subscribing to channels used by Socket.io.
       * If unspecified, Sails will create a client for you.
       * @type {any}
       */
      subClient: any;
    }
    interface Views {
      /**
       * Set the default layout for your app by specifying the relative path to
       * the desired layout file from your views folder (i.e. views/.) Or disable
       * layout support altogether with false. Built-in support for layouts is
       * only relevant when using ejs
       * @type {[type]}
       */
      layout: boolean | string;
      /**
       * The view engine your app will use to compile server-side markup into HTML.
       * @type {string}
       */
      engine: string;
      /**
       * The file extension for view files.
       * @type {string}
       */
      extension: string;
      /**
       * Default data to be included as view locals every time a server-side view
       * is compiled anywhere in this app. If an optional locals argument was passed
       * in directly via res.view(), its properties take precedence when both
       * dictionaries are merged and provided to the view (more on that below)
       * @type {any}
       */
      locals: any;
    }
  }

  namespace Hooks {
    interface Blueprints { }
    interface Controllers { }
    interface CORS { }
    interface CSRF { }
    interface Grunt { }
    interface HTTP { }
    interface i18n { }
    interface Logger { }
    interface ModuleLoader { }
    interface Policies { }
    interface PubSub { }
    interface Request { }
    interface Responses { }
    interface Services { }
    interface Session { }
    interface UserConfig { }
    interface UserHooks { }
    interface Views { }
  }

  interface Controller {
    _config?: {
      actions?: boolean,
      shortcuts?: boolean,
      rest?: boolean
    };
  }

}

export = sails;
}
